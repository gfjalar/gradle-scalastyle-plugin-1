/*
 *    Copyright 2014. Binh Nguyen
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
plugins {
    id 'groovy'
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'com.gradle.plugin-publish' version "0.11.0"
    id 'org.jetbrains.gradle.plugin.idea-ext' version "0.4.2"
}

version = '3.4.0'
group = 'com.github.alisiikh'

ext {
    scalaLangVersion = '2.12'
}

wrapper {
    gradleVersion = '6.0.1'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    projectGithub = 'https://github.com/alisiikh/gradle-scalastyle-plugin'
    pluginId = 'com.github.alisiikh.scalastyle'
    pluginDescription = 'Gradle plugin for scalastyle'
}

repositories {
    jcenter()
}

dependencies {
    implementation gradleApi()
    implementation localGroovy()

    testImplementation gradleTestKit()
    testImplementation('org.spockframework:spock-core:1.3-groovy-2.5') {
        exclude module: 'groovy-all'
    }
    testImplementation 'commons-io:commons-io:2.6'
}

sourceSets {
    functionalTest {
        java.srcDir file('src/functionalTest/java')
        groovy.srcDir file('src/functionalTest/groovy')
        resources.srcDir file('src/functionalTest/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}

task functionalTest(type: Test) {
    description = 'Runs the functional tests.'
    group = 'verification'

    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath

    testLogging {
        showStandardStreams = true
    }
    mustRunAfter test
}

check.dependsOn functionalTest

gradlePlugin {
    testSourceSets sourceSets.functionalTest
}

publishing {
    publications {
        plugin(MavenPublication) {
            from components.java
        }
    }
}

pluginBundle {
    mavenCoordinates {
        groupId = project.group
    }

    website = projectGithub
    vcsUrl = projectGithub
    description = pluginDescription
    tags = ['scalastyle', 'scala', 'code analysis', 'checkstyle']
}

gradlePlugin {
    plugins {
        scalastyle {
            id = pluginId
            implementationClass = 'com.github.alisiikh.scalastyle.ScalastylePlugin'
            displayName = pluginDescription
        }
    }
}


task fixIdeaPluginClasspath {
    doFirst {
        configure(tasks.pluginUnderTestMetadata) {
            def ideaClassesPath = project.buildDir.toPath().resolveSibling("out").resolve("production")
            def newClasspath = pluginClasspath as List
            newClasspath.add(0, ideaClassesPath)
            pluginClasspath.setFrom(newClasspath)
        }
    }
}
pluginUnderTestMetadata.mustRunAfter(fixIdeaPluginClasspath)

idea.project.settings {
    taskTriggers {
        beforeBuild(fixIdeaPluginClasspath, pluginUnderTestMetadata)
    }
}
